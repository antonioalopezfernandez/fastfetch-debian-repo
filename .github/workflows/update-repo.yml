name: Actualizar Repositorio de Debian

on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *" # Todos los días a las 02:00 UTC

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repositorio
        uses: actions/checkout@v3

      - name: Instalar herramientas de empaquetado
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev apt-utils jq curl

      - name: Descargar la última release de Fastfetch (autenticada y robusta)
        id: get_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          API_URL="https://api.github.com/repos/fastfetch-cli/fastfetch/releases/latest"

          # Llamada autenticada para evitar rate limits
          HTTP_CODE=$(curl -sS -H "Authorization: Bearer $GH_TOKEN" \
                              -H "Accept: application/vnd.github+json" \
                              -H "User-Agent: gh-actions-fastfetch" \
                              -w "%{http_code}" -o /tmp/release.json "$API_URL")

          if [ "$HTTP_CODE" != "200" ]; then
            echo "Fallo al pedir la API (HTTP $HTTP_CODE):"
            cat /tmp/release.json || true
            exit 1
          fi

          LAST_VERSION=$(jq -r '.tag_name // empty' /tmp/release.json)
          if [ -z "${LAST_VERSION:-}" ]; then
            echo "La respuesta no contiene tag_name:"
            cat /tmp/release.json
            exit 1
          fi
          echo "Se encontró la versión más reciente: $LAST_VERSION"
          echo "LAST_VERSION=$LAST_VERSION" >> $GITHUB_ENV

          mkdir -p debs

          # Obtiene directamente las URLs de los .deb publicados por Fastfetch
          # (formato: fastfetch-linux-{amd64|aarch64|armv6l|armv7l}.deb)
          jq -r '.assets[].browser_download_url
                 | select(test("fastfetch-linux-(amd64|aarch64|armv6l|armv7l)\\.deb$"))' \
                 /tmp/release.json > /tmp/deb_urls.txt

          if [ ! -s /tmp/deb_urls.txt ]; then
            echo "No se encontraron .deb en la release $LAST_VERSION"
            exit 1
          fi

          while IFS= read -r url; do
            echo "Descargando $(basename "$url") ..."
            if ! curl -fL -o "debs/$(basename "$url")" "$url"; then
              echo "ADVERTENCIA: fallo al descargar $url"
              rm -f "debs/$(basename "$url")" || true
            fi
          done < /tmp/deb_urls.txt

          echo "Contenido de debs/:"
          ls -l debs || true

      - name: Crear el repositorio de Debian
        run: |
          set -euo pipefail
          cd debs
          # Genera Packages.gz a partir de los .deb presentes en esta carpeta
          dpkg-scanpackages -m . /dev/null | gzip -9c > Packages.gz
          # Genera Release (sin firma)
          apt-ftparchive release . > Release
          echo "Archivos generados:"
          ls -l

      - name: Publicar en GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./debs
          publish_branch: gh-pages
          commit_message: "Actualizar a Fastfetch ${{ env.LAST_VERSION }}"